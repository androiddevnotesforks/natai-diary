/**
 * Generated by @openapi-codegen
 *
 * @version 1.0.0
 */
import * as reactQuery from "@tanstack/react-query";
import { useApiContext, ApiContext } from "./apiContext";
import type * as Fetcher from "./apiFetcher";
import { apiFetch } from "./apiFetcher";
import type * as Schemas from "./apiSchemas";

export type PostLoginError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Schemas.LoginErrorRef;
    }
  | {
      status: 500;
      payload: Schemas.ServerErrorRef;
    }
>;

export type PostLoginVariables = {
  body: Schemas.LoginRequestRef;
} & ApiContext["fetcherOptions"];

export const fetchPostLogin = (
  variables: PostLoginVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.LoginSuccessResponse,
    PostLoginError,
    Schemas.LoginRequestRef,
    {},
    {},
    {}
  >({ url: "/api/v1/login", method: "post", ...variables, signal });

export const usePostLogin = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.LoginSuccessResponse,
      PostLoginError,
      PostLoginVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.LoginSuccessResponse,
    PostLoginError,
    PostLoginVariables
  >(
    (variables: PostLoginVariables) =>
      fetchPostLogin({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetAppAuthLogoutactionInvokeError = Fetcher.ErrorWrapper<undefined>;

export type GetAppAuthLogoutactionInvokeVariables =
  ApiContext["fetcherOptions"];

export const fetchGetAppAuthLogoutactionInvoke = (
  variables: GetAppAuthLogoutactionInvokeVariables,
  signal?: AbortSignal
) =>
  apiFetch<undefined, GetAppAuthLogoutactionInvokeError, undefined, {}, {}, {}>(
    { url: "/api/v1/logout", method: "get", ...variables, signal }
  );

export const useGetAppAuthLogoutactionInvoke = <TData = undefined>(
  variables: GetAppAuthLogoutactionInvokeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      GetAppAuthLogoutactionInvokeError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    undefined,
    GetAppAuthLogoutactionInvokeError,
    TData
  >(
    queryKeyFn({
      path: "/api/v1/logout",
      operationId: "getAppAuthLogoutactionInvoke",
      variables,
    }),
    ({ signal }) =>
      fetchGetAppAuthLogoutactionInvoke(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type PostAppAuthPasswordresetAskforpasswordresetError =
  Fetcher.ErrorWrapper<
    | {
        status: 400;
        payload: Schemas.ValidationErrorResponseRef;
      }
    | {
        status: 404;
        payload: Schemas.ResetPasswordErrorRef;
      }
    | {
        status: 500;
        payload: Schemas.ServerErrorRef;
      }
  >;

export type PostAppAuthPasswordresetAskforpasswordresetVariables = {
  body: Schemas.PasswordResetRequest;
} & ApiContext["fetcherOptions"];

export const fetchPostAppAuthPasswordresetAskforpasswordreset = (
  variables: PostAppAuthPasswordresetAskforpasswordresetVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    undefined,
    PostAppAuthPasswordresetAskforpasswordresetError,
    Schemas.PasswordResetRequest,
    {},
    {},
    {}
  >({ url: "/api/v1/password-reset", method: "post", ...variables, signal });

export const usePostAppAuthPasswordresetAskforpasswordreset = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      PostAppAuthPasswordresetAskforpasswordresetError,
      PostAppAuthPasswordresetAskforpasswordresetVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    PostAppAuthPasswordresetAskforpasswordresetError,
    PostAppAuthPasswordresetAskforpasswordresetVariables
  >(
    (variables: PostAppAuthPasswordresetAskforpasswordresetVariables) =>
      fetchPostAppAuthPasswordresetAskforpasswordreset({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type PostAppAuthPasswordresetResetpasswordbytokenError =
  Fetcher.ErrorWrapper<
    | {
        status: 400;
        payload: Schemas.ValidationErrorResponseRef;
      }
    | {
        status: 404;
        payload: Schemas.ResetPasswordConfirmationErrorRef;
      }
    | {
        status: 422;
        payload: Schemas.ResetPasswordConfirmationErrorRef;
      }
    | {
        status: 500;
        payload: Schemas.ServerErrorRef;
      }
  >;

export type PostAppAuthPasswordresetResetpasswordbytokenVariables = {
  body: Schemas.PasswordResetRequest;
} & ApiContext["fetcherOptions"];

export const fetchPostAppAuthPasswordresetResetpasswordbytoken = (
  variables: PostAppAuthPasswordresetResetpasswordbytokenVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    undefined,
    PostAppAuthPasswordresetResetpasswordbytokenError,
    Schemas.PasswordResetRequest,
    {},
    {},
    {}
  >({
    url: "/api/v1/password-reset-confirmation",
    method: "post",
    ...variables,
    signal,
  });

export const usePostAppAuthPasswordresetResetpasswordbytoken = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      PostAppAuthPasswordresetResetpasswordbytokenError,
      PostAppAuthPasswordresetResetpasswordbytokenVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    PostAppAuthPasswordresetResetpasswordbytokenError,
    PostAppAuthPasswordresetResetpasswordbytokenVariables
  >(
    (variables: PostAppAuthPasswordresetResetpasswordbytokenVariables) =>
      fetchPostAppAuthPasswordresetResetpasswordbytoken({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type PostAppAuthRegistrationactionInvokeError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Schemas.ValidationErrorResponseRef;
    }
  | {
      status: 422;
      payload: Schemas.RegistrationErrorResponseRef;
    }
  | {
      status: 500;
      payload: Schemas.ServerErrorRef;
    }
>;

export type PostAppAuthRegistrationactionInvokeVariables = {
  body: Schemas.RegistrationRequest;
} & ApiContext["fetcherOptions"];

export const fetchPostAppAuthRegistrationactionInvoke = (
  variables: PostAppAuthRegistrationactionInvokeVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.RegistrationSuccessResponse,
    PostAppAuthRegistrationactionInvokeError,
    Schemas.RegistrationRequest,
    {},
    {},
    {}
  >({ url: "/api/v1/registration", method: "post", ...variables, signal });

export const usePostAppAuthRegistrationactionInvoke = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RegistrationSuccessResponse,
      PostAppAuthRegistrationactionInvokeError,
      PostAppAuthRegistrationactionInvokeVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.RegistrationSuccessResponse,
    PostAppAuthRegistrationactionInvokeError,
    PostAppAuthRegistrationactionInvokeVariables
  >(
    (variables: PostAppAuthRegistrationactionInvokeVariables) =>
      fetchPostAppAuthRegistrationactionInvoke({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type GetAppAuthUserinfoactionInvokeError = Fetcher.ErrorWrapper<{
  status: 401;
  payload: Schemas.AuthRequiredErrorResponse;
}>;

export type GetAppAuthUserinfoactionInvokeVariables =
  ApiContext["fetcherOptions"];

export const fetchGetAppAuthUserinfoactionInvoke = (
  variables: GetAppAuthUserinfoactionInvokeVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.UserInfoResponse,
    GetAppAuthUserinfoactionInvokeError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/v1/me", method: "get", ...variables, signal });

export const useGetAppAuthUserinfoactionInvoke = <
  TData = Schemas.UserInfoResponse
>(
  variables: GetAppAuthUserinfoactionInvokeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.UserInfoResponse,
      GetAppAuthUserinfoactionInvokeError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    Schemas.UserInfoResponse,
    GetAppAuthUserinfoactionInvokeError,
    TData
  >(
    queryKeyFn({
      path: "/api/v1/me",
      operationId: "getAppAuthUserinfoactionInvoke",
      variables,
    }),
    ({ signal }) =>
      fetchGetAppAuthUserinfoactionInvoke(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type PostAppAuthVerifyemailactionInvokeError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Schemas.ValidationErrorResponseRef;
    }
  | {
      status: 404;
      payload: Schemas.VerifyEmailResponseRef;
    }
  | {
      status: 422;
      payload: Schemas.VerifyEmailResponseRef;
    }
  | {
      status: 500;
      payload: Schemas.ServerErrorRef;
    }
>;

export type PostAppAuthVerifyemailactionInvokeVariables = {
  body: Schemas.VerifyEmailRequest;
} & ApiContext["fetcherOptions"];

export const fetchPostAppAuthVerifyemailactionInvoke = (
  variables: PostAppAuthVerifyemailactionInvokeVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    undefined,
    PostAppAuthVerifyemailactionInvokeError,
    Schemas.VerifyEmailRequest,
    {},
    {},
    {}
  >({ url: "/api/v1/verify-email", method: "post", ...variables, signal });

export const usePostAppAuthVerifyemailactionInvoke = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      PostAppAuthVerifyemailactionInvokeError,
      PostAppAuthVerifyemailactionInvokeVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    PostAppAuthVerifyemailactionInvokeError,
    PostAppAuthVerifyemailactionInvokeVariables
  >(
    (variables: PostAppAuthVerifyemailactionInvokeVariables) =>
      fetchPostAppAuthVerifyemailactionInvoke({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type PutAppDiaryUpdatenoteactionInvokePathParams = {
  id: string;
};

export type PutAppDiaryUpdatenoteactionInvokeError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Schemas.ValidationErrorResponseRef;
    }
  | {
      status: 401;
      payload: Schemas.AuthRequiredErrorResponse;
    }
  | {
      status: 403;
      payload: Schemas.AccessDeniedErrorRef;
    }
  | {
      status: 404;
      payload: Schemas.NotFoundErrorRef;
    }
>;

export type PutAppDiaryUpdatenoteactionInvokeVariables = {
  body: Schemas.UpdateNoteRequest;
  pathParams: PutAppDiaryUpdatenoteactionInvokePathParams;
} & ApiContext["fetcherOptions"];

export const fetchPutAppDiaryUpdatenoteactionInvoke = (
  variables: PutAppDiaryUpdatenoteactionInvokeVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    undefined,
    PutAppDiaryUpdatenoteactionInvokeError,
    Schemas.UpdateNoteRequest,
    {},
    {},
    PutAppDiaryUpdatenoteactionInvokePathParams
  >({ url: "/api/v1/notes/{id}", method: "put", ...variables, signal });

export const usePutAppDiaryUpdatenoteactionInvoke = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      PutAppDiaryUpdatenoteactionInvokeError,
      PutAppDiaryUpdatenoteactionInvokeVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    PutAppDiaryUpdatenoteactionInvokeError,
    PutAppDiaryUpdatenoteactionInvokeVariables
  >(
    (variables: PutAppDiaryUpdatenoteactionInvokeVariables) =>
      fetchPutAppDiaryUpdatenoteactionInvoke({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type DeleteAppDiaryDeletenoteactionInvokePathParams = {
  id: string;
};

export type DeleteAppDiaryDeletenoteactionInvokeError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Schemas.AuthRequiredErrorResponse;
    }
  | {
      status: 403;
      payload: Schemas.AccessDeniedErrorRef;
    }
  | {
      status: 404;
      payload: Schemas.NotFoundErrorRef;
    }
>;

export type DeleteAppDiaryDeletenoteactionInvokeVariables = {
  pathParams: DeleteAppDiaryDeletenoteactionInvokePathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteAppDiaryDeletenoteactionInvoke = (
  variables: DeleteAppDiaryDeletenoteactionInvokeVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    undefined,
    DeleteAppDiaryDeletenoteactionInvokeError,
    undefined,
    {},
    {},
    DeleteAppDiaryDeletenoteactionInvokePathParams
  >({ url: "/api/v1/notes/{id}", method: "delete", ...variables, signal });

export const useDeleteAppDiaryDeletenoteactionInvoke = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      DeleteAppDiaryDeletenoteactionInvokeError,
      DeleteAppDiaryDeletenoteactionInvokeVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    DeleteAppDiaryDeletenoteactionInvokeError,
    DeleteAppDiaryDeletenoteactionInvokeVariables
  >(
    (variables: DeleteAppDiaryDeletenoteactionInvokeVariables) =>
      fetchDeleteAppDiaryDeletenoteactionInvoke({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type GetAppDiaryFindallnotesactionInvokeError = Fetcher.ErrorWrapper<{
  status: 401;
  payload: Schemas.AuthRequiredErrorResponse;
}>;

export type GetAppDiaryFindallnotesactionInvokeVariables =
  ApiContext["fetcherOptions"];

export const fetchGetAppDiaryFindallnotesactionInvoke = (
  variables: GetAppDiaryFindallnotesactionInvokeVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.FindAllNotesResponse,
    GetAppDiaryFindallnotesactionInvokeError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/v1/notes", method: "get", ...variables, signal });

export const useGetAppDiaryFindallnotesactionInvoke = <
  TData = Schemas.FindAllNotesResponse
>(
  variables: GetAppDiaryFindallnotesactionInvokeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.FindAllNotesResponse,
      GetAppDiaryFindallnotesactionInvokeError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    Schemas.FindAllNotesResponse,
    GetAppDiaryFindallnotesactionInvokeError,
    TData
  >(
    queryKeyFn({
      path: "/api/v1/notes",
      operationId: "getAppDiaryFindallnotesactionInvoke",
      variables,
    }),
    ({ signal }) =>
      fetchGetAppDiaryFindallnotesactionInvoke(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type PostAppDiaryNewnoteactionInvokeError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Schemas.ValidationErrorResponseRef;
    }
  | {
      status: 401;
      payload: Schemas.AuthRequiredErrorResponse;
    }
>;

export type PostAppDiaryNewnoteactionInvokeVariables = {
  body: Schemas.NewNoteRequest;
} & ApiContext["fetcherOptions"];

export const fetchPostAppDiaryNewnoteactionInvoke = (
  variables: PostAppDiaryNewnoteactionInvokeVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.NewNoteResponse,
    PostAppDiaryNewnoteactionInvokeError,
    Schemas.NewNoteRequest,
    {},
    {},
    {}
  >({ url: "/api/v1/notes", method: "post", ...variables, signal });

export const usePostAppDiaryNewnoteactionInvoke = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.NewNoteResponse,
      PostAppDiaryNewnoteactionInvokeError,
      PostAppDiaryNewnoteactionInvokeVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.NewNoteResponse,
    PostAppDiaryNewnoteactionInvokeError,
    PostAppDiaryNewnoteactionInvokeVariables
  >(
    (variables: PostAppDiaryNewnoteactionInvokeVariables) =>
      fetchPostAppDiaryNewnoteactionInvoke({ ...fetcherOptions, ...variables }),
    options
  );
};

export type QueryOperation =
  | {
      path: "/api/v1/logout";
      operationId: "getAppAuthLogoutactionInvoke";
      variables: GetAppAuthLogoutactionInvokeVariables;
    }
  | {
      path: "/api/v1/me";
      operationId: "getAppAuthUserinfoactionInvoke";
      variables: GetAppAuthUserinfoactionInvokeVariables;
    }
  | {
      path: "/api/v1/notes";
      operationId: "getAppDiaryFindallnotesactionInvoke";
      variables: GetAppDiaryFindallnotesactionInvokeVariables;
    };
